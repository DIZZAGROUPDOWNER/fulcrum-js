{"version":3,"sources":["../../src/resources/media-base.js"],"names":["require","MediaResource","file","attributes","attrs","formData","append","resourceName","access_key","v4","body","headers","options","optionsForUpload","client","api","post","createAction","resp","error","accessKey","version","find","media","fetch","then","callback","streamVersion","includeInto"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;AANA;AACAA,QAAQ,gBAAR;;IAOqBC,a;;;;;;;;;;qCACFC,I,EAAMC,U,EAAY;AACjC,UAAMC,QAAQD,cAAc,EAA5B;AACA,UAAME,WAAW,wBAAjB;;AAEAA,eAASC,MAAT,CAAmB,KAAKC,YAAxB,mBAAoDH,MAAMI,UAAN,IAAoB,eAAKC,EAAL,EAAxE;AACAJ,eAASC,MAAT,CAAmB,KAAKC,YAAxB,aAA8CL,IAA9C;;AAEA,aAAO;AACLQ,cAAML,QADD;AAELM,iBAAS;AACP,0BAAgB;AADT;AAFJ,OAAP;AAMD;;;;2GAEYT,I,EAAMC,U;;;;;;AACXS,uB,GAAU,KAAKC,gBAAL,CAAsBX,IAAtB,EAA4BC,UAA5B,C;;uBACG,KAAKW,MAAL,CAAYC,GAAZ,CAAgBC,IAAhB,CAAqB,KAAKC,YAA1B,EAAwCL,OAAxC,C;;;AAAbM,oB;;qBAEFA,KAAKC,K;;;;;sBACDD,KAAKC,K;;;iDAGND,KAAKR,IAAL,CAAU,KAAKH,YAAf,C;;;;;;;;;;;;;;;;;;;6GAGWa,S,EAAWC,O;;;;;;;uBACT,KAAKC,IAAL,CAAUF,SAAV,C;;;AAAdG,qB;kDACCC,MAAMD,MAAMF,OAAN,CAAN,EACJI,IADI,CACC;AAAA,yBAAQP,KAAKR,IAAb;AAAA,iBADD,C;;;;;;;;;;;;;;;;;;mCAIMU,S,EAAWM,Q,EAAU;AAClC,aAAO,KAAKC,aAAL,CAAmBP,SAAnB,EAA8B,UAA9B,CAAP;AACD;;;;;kBAnCkBnB,a;;;AAsCrB,eAAK2B,WAAL,CAAiB3B,aAAjB;AACA,eAAK2B,WAAL,CAAiB3B,aAAjB;AACA,iBAAO2B,WAAP,CAAmB3B,aAAnB","file":"media-base.js","sourcesContent":["import uuid from 'uuid';\nimport FormData from 'form-data';\n// import fetch from 'isomorphic-fetch';\nrequire('portable-fetch');\n\nimport List from '../actions/list';\nimport Find from '../actions/find';\nimport Create from '../actions/create';\nimport Resource from './base';\n\nexport default class MediaResource extends Resource {\n  optionsForUpload(file, attributes) {\n    const attrs = attributes || {};\n    const formData = new FormData();\n\n    formData.append(`${this.resourceName}[access_key]`, attrs.access_key || uuid.v4());\n    formData.append(`${this.resourceName}[file]`, file);\n\n    return {\n      body: formData,\n      headers: {\n        'Content-Type': null\n      }\n    };\n  }\n\n  async create(file, attributes) {\n    const options = this.optionsForUpload(file, attributes);\n    const resp = await this.client.api.post(this.createAction, options);\n\n    if (resp.error) {\n      throw resp.error;\n    }\n\n    return resp.body[this.resourceName];\n  }\n\n  async streamVersion(accessKey, version) {\n    const media = await this.find(accessKey);\n    return fetch(media[version])\n      .then(resp => resp.body);\n  }\n\n  streamOriginal(accessKey, callback) {\n    return this.streamVersion(accessKey, 'original');\n  }\n}\n\nList.includeInto(MediaResource);\nFind.includeInto(MediaResource);\nCreate.includeInto(MediaResource);\n"]}