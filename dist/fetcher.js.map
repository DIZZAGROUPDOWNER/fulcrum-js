{"version":3,"sources":["../src/fetcher.js"],"names":["getQueryString","params","Object","keys","map","encodeURIComponent","k","join","errorMessageForStatus","status","messages","Fetcher","options","optionObjects","assign","baseURI","hasOwnProperty","body","JSON","stringify","headers","url","fetch","resp","ok","errorMessage","Error","contentType","get","split","json","text","path","opts","qs","_processOptions","method","_fetch","_processOptionsMedia"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,cAAT,CAAwBC,MAAxB,EAAgC;AAC9B,SAAOC,OAAOC,IAAP,CAAYF,MAAZ,EACJG,GADI,CACA;AAAA,WAAKC,mBAAmBC,CAAnB,IAAwB,GAAxB,GAA8BD,mBAAmBJ,OAAOK,CAAP,CAAnB,CAAnC;AAAA,GADA,EAEJC,IAFI,CAEC,GAFD,CAAP;AAGD;;AAED,SAASC,qBAAT,CAA+BC,MAA/B,EAAuC;AACrC,MAAMC,WAAW;AACf,SAAK,aADU;AAEf,SAAK,cAFU;AAGf,SAAK,kBAHU;AAIf,SAAK,WAJU;AAKf,SAAK;AALU,GAAjB;;AAQA,SAAOA,SAASD,MAAT,eAA4BA,MAAnC;AACD;;IAEoBE,O;AACnB,mBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;;;;oCAEeC,a,EAAe;AAC7B,UAAMD,UAAUV,OAAOY,MAAP,CAAc,EAAd,EAAkB,KAAKF,OAAvB,EAAgCC,aAAhC,CAAhB;;AAEA,aAAOD,QAAQG,OAAf;;AAEA,UAAIH,WAAWA,QAAQI,cAAR,CAAuB,MAAvB,CAAf,EAA+C;AAC7CJ,gBAAQK,IAAR,GAAeC,KAAKC,SAAL,CAAeP,QAAQK,IAAvB,CAAf;AACD;;AAED,aAAOL,OAAP;AACD;;;yCAEoBC,a,EAAe;AAClC,UAAMD,UAAUV,OAAOY,MAAP,CAAc,EAAd,EAAkB,KAAKF,OAAvB,EAAgCC,aAAhC,CAAhB;;AAEA,aAAOD,QAAQG,OAAf;;AAEA;AACA;AACA;AACA,aAAOH,QAAQQ,OAAR,CAAgB,cAAhB,CAAP;;AAEA,aAAOR,OAAP;AACD;;;;2GAEYS,G,EAAKT,O;;;;;;;uBACGU,MAAMD,GAAN,EAAWT,OAAX,C;;;AAAbW,oB;;oBAEDA,KAAKC,E;;;;;AACFC,4B,GAAejB,sBAAsBe,KAAKd,MAA3B,KAAsC,e;sBACrD,IAAIiB,KAAJ,CAAUD,YAAV,C;;;AAGFE,2B,GAAcJ,KAAKH,OAAL,CAAaQ,GAAb,CAAiB,cAAjB,C;;sBAChBD,eAAeA,YAAYE,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,MAA8B,kB;;;;;iDACxCN,KAAKO,IAAL,E;;;iDAGFP,KAAKQ,IAAL,E;;;;;;;;;;;;;;;;;;wBAGLC,I,EAAMC,I,EAAM;AACd,UAAIZ,MAAM,KAAKT,OAAL,CAAaG,OAAb,GAAuB,GAAvB,GAA6BiB,IAAvC;;AAEA,UAAIC,QAAQA,KAAKjB,cAAL,CAAoB,IAApB,CAAZ,EAAuC;AACrCK,eAAO,MAAMrB,eAAeiC,KAAKC,EAApB,CAAb;AACA,eAAOD,KAAKC,EAAZ;AACD;;AAED,UAAMtB,UAAU,KAAKuB,eAAL,CAAqBjC,OAAOY,MAAP,CAAc,EAACsB,QAAQ,KAAT,EAAd,EAA+BH,IAA/B,CAArB,CAAhB;;AAEA,aAAO,KAAKI,MAAL,CAAYhB,GAAZ,EAAiBT,OAAjB,CAAP;AACD;;;8BAESoB,I,EAAMC,I,EAAM;AACpB,UAAMZ,MAAM,KAAKT,OAAL,CAAaG,OAAb,GAAuB,GAAvB,GAA6BiB,IAAzC;;AAEA,UAAMpB,UAAU,KAAK0B,oBAAL,CAA0BpC,OAAOY,MAAP,CAAc,EAACsB,QAAQ,MAAT,EAAd,EAAgCH,IAAhC,CAA1B,CAAhB;;AAEA,aAAO,KAAKI,MAAL,CAAYhB,GAAZ,EAAiBT,OAAjB,CAAP;AACD;;;yBAEIoB,I,EAAMC,I,EAAM;AACf,UAAMZ,MAAM,KAAKT,OAAL,CAAaG,OAAb,GAAuB,GAAvB,GAA6BiB,IAAzC;;AAEA,UAAMpB,UAAU,KAAKuB,eAAL,CAAqBjC,OAAOY,MAAP,CAAc,EAACsB,QAAQ,MAAT,EAAd,EAAgCH,IAAhC,CAArB,CAAhB;;AAEA,aAAO,KAAKI,MAAL,CAAYhB,GAAZ,EAAiBT,OAAjB,CAAP;AACD;;;wBAEGoB,I,EAAMC,I,EAAM;AACd,UAAMZ,MAAM,KAAKT,OAAL,CAAaG,OAAb,GAAuB,GAAvB,GAA6BiB,IAAzC;;AAEA,UAAMpB,UAAU,KAAKuB,eAAL,CAAqBjC,OAAOY,MAAP,CAAc,EAACsB,QAAQ,KAAT,EAAd,EAA+BH,IAA/B,CAArB,CAAhB;;AAEA,aAAO,KAAKI,MAAL,CAAYhB,GAAZ,EAAiBT,OAAjB,CAAP;AACD;;;wBAEGoB,I,EAAMC,I,EAAM;AACd,UAAMZ,MAAM,KAAKT,OAAL,CAAaG,OAAb,GAAuB,GAAvB,GAA6BiB,IAAzC;;AAEA,UAAMpB,UAAU,KAAKuB,eAAL,CAAqBjC,OAAOY,MAAP,CAAc,EAACsB,QAAQ,QAAT,EAAd,EAAkCH,IAAlC,CAArB,CAAhB;;AAEA,aAAO,KAAKI,MAAL,CAAYhB,GAAZ,EAAiBT,OAAjB,CAAP;AACD;;;;;kBAzFkBD,O","file":"fetcher.js","sourcesContent":["function getQueryString(params) {\n  return Object.keys(params)\n    .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))\n    .join('&');\n}\n\nfunction errorMessageForStatus(status) {\n  const messages = {\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found'\n  };\n\n  return messages[status] || `HTTP ${status}`;\n}\n\nexport default class Fetcher {\n  constructor(options) {\n    this.options = options;\n  }\n\n  _processOptions(optionObjects) {\n    const options = Object.assign({}, this.options, optionObjects);\n\n    delete options.baseURI;\n\n    if (options && options.hasOwnProperty('body')) {\n      options.body = JSON.stringify(options.body);\n    }\n\n    return options;\n  }\n\n  _processOptionsMedia(optionObjects) {\n    const options = Object.assign({}, this.options, optionObjects);\n\n    delete options.baseURI;\n\n    // The fetch library will automatically add the multipart/form-data\n    // Content-Type including the generated boundaries.\n    // https://github.com/github/fetch/issues/505#issuecomment-293064470\n    delete options.headers['Content-Type'];\n\n    return options;\n  }\n\n  async _fetch(url, options) {\n    const resp = await fetch(url, options);\n\n    if (!resp.ok) {\n      const errorMessage = errorMessageForStatus(resp.status) || 'Unknown Error';\n      throw new Error(errorMessage);\n    }\n\n    const contentType = resp.headers.get('Content-Type');\n    if (contentType && contentType.split(';')[0] === 'application/json') {\n      return resp.json();\n    }\n\n    return resp.text();\n  }\n\n  get(path, opts) {\n    let url = this.options.baseURI + '/' + path;\n\n    if (opts && opts.hasOwnProperty('qs')) {\n      url += '?' + getQueryString(opts.qs);\n      delete opts.qs;\n    }\n\n    const options = this._processOptions(Object.assign({method: 'GET'}, opts));\n\n    return this._fetch(url, options);\n  }\n\n  postMedia(path, opts) {\n    const url = this.options.baseURI + '/' + path;\n\n    const options = this._processOptionsMedia(Object.assign({method: 'POST'}, opts));\n\n    return this._fetch(url, options);\n  }\n\n  post(path, opts) {\n    const url = this.options.baseURI + '/' + path;\n\n    const options = this._processOptions(Object.assign({method: 'POST'}, opts));\n\n    return this._fetch(url, options);\n  }\n\n  put(path, opts) {\n    const url = this.options.baseURI + '/' + path;\n\n    const options = this._processOptions(Object.assign({method: 'PUT'}, opts));\n\n    return this._fetch(url, options);\n  }\n\n  del(path, opts) {\n    const url = this.options.baseURI + '/' + path;\n\n    const options = this._processOptions(Object.assign({method: 'DELETE'}, opts));\n\n    return this._fetch(url, options);\n  }\n}\n"]}